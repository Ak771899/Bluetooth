

name: WinUI 3 MSIX app

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, github-action-ci ]
  pull_request:
    branches: [ master, github-action-ci ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86, ARM64]

    runs-on: windows-latest
    
    env:
      Solution_Name: MyPhone

    steps:
      - uses: actions/checkout@v3

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Create the app package by building and packaging the project
      - name: Create the app package
        run: |
            msbuild $env:Solution_Name `
                /p:Configuration=$env:Configuration `
                /p:Platform=$env:Platform `
                /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode `
                /p:AppxBundle=$env:Appx_Bundle `
                /p:AppxPackageDir="$env:Appx_Package_Dir" `
                /p:GenerateAppxPackageOnBuild=true
        env:
          Appx_Bundle: Never
          Appx_Package_Build_Mode: SideloadOnly
          Appx_Package_Dir: Packages\
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}

      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload MSIX package
        uses: actions/upload-artifact@v2
        with:
          name: MSIX Package
          path: ${{ env.Solution_Name }}\\Packages
          
  bundle:
    name: Bundle and sign the MSIX package
    runs-on: windows-latest
    needs: build
    
    env:
      Bundling_Workspace_Path: BundlingWorkspace
      Bundle_Path: BundlePackage
    
    steps:
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3.0.0
        
      - name: Prepare workspace
        run: |
          mkdir $env:Bundle_Path
          mkdir $env:Bundling_Workspace_Path
          ls
        
      - name: Bundle package
        run: |
          cp .\Packages\*\*.msix $env:Bundling_Workspace_Path
          $files = ls $env:Bundling_Workspace_Path | Sort-Object -Property Name -Descending
          $env:bundleName = $files[0].Name
          $env:bundleName.Substring(0, $bundleName.LastIndexOf('_'))
          foreach ($f in $files) {
            $beginIndex = $f.Name.LastIndexOf('_')
            $endIndex = $f.Name.LastIndexOf('.')
            $bundleName += $f.Name.Substring($beginIndex, $endIndex - $beginIndex)
          }
          $env:bundleName += ".msixbundle"
          Write-Output "Making MSIX bundle ${env:bundleName}"
          MakeAppx bundle /d $env:Bundling_Workspace_Path /p "${env:Bundle_Path}\${env:bundleName}"
         
      # Decode the base 64 encoded pfx and save the Signing_Certificate
      - name: Decode the pfx
        id: decode-pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.TESTING_PFX_BASE64_ENCODED }}")
          $certificatePath = "GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
          
      - name: Sign the bundle
        run: |
          SignTool sign /fd SHA256 /a /f GitHubActionsWorkflow.pfx /p "${{ secrets.TESTING_PFX_PASSPHRASE }}" $env:bundleName 
      
      # Remove the pfx
      - name: Post Decode the pfx
        if: ${{ steps.decode-pfx.outcome == 'success' || steps.decode-pfx.outcome == 'failure' }}
        run: Remove-Item -path GitHubActionsWorkflow.pfx
        
      - name: Delete old unsigned artifact
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: MSIX Package
          
      - name: Upload signed MSIX package bundle
        uses: actions/upload-artifact@v2
        with:
          name: MSIX Package
          path: $env:Bundle_Path
    
